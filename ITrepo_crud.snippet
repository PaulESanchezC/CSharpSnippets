<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Generic Repository</Title>
			<Shortcut>ITrepo_crud</Shortcut>
			<Description>Scaffolds a generic repository with T,TDto,TCreate,TUpdate as classes </Description>
			<Author>Microsoft Corporation</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
using System.Linq.Expressions;
using Models.ResponseModels;

namespace Services.Repository;

public interface IRepository<T,TDto,TCreate, TUpdate>
where T:class
where TDto: class
where TCreate: class
where TUpdate: class

{
    Task<Response<TDto>> GetAllByAsync(Expression<Func<T, bool>>? predicate, Expression<Func<T, object>>? orderBy, CancellationToken cancellationToken, params Expression<Func<T,object>>[] includes);
    Task<Response<TDto>> GetSingleByAsync(Expression<Func<T,bool>> predicate, CancellationToken cancellationToken, params Expression<Func<T,object>>[] includes);
    Task<Response<TDto>> GetAllWithPagesAsync(int pageSize, int currentPage, Expression<Func<T, bool>>? predicate, Expression<Func<T, object>>? orderBy, CancellationToken cancellationToken,
        params Expression<Func<T, object>>[] includes);
    Task<Response<TDto>> CreateAsync(TCreate objectToCreate, CancellationToken cancellationToken);
    Task<Response<TDto>> UpdateAsync(TUpdate objectToUpdate, CancellationToken cancellationToken);
    Task<Response<TDto>> DeleteAsync(string objectId, CancellationToken cancellationToken);

    Task<Response<TDto>> ResponseSingleBuilderTask(bool isSuccessful, int statusCode, string title, string message,
        T? responseObject);
    Task<Response<TDto>> ResponseManyBuilderTask(bool isSuccessful, int statusCode, string title, string message,
        List<T>? responseObject);
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>